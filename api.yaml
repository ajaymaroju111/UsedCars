openapi: "3.1.0"
security:
  - CookieAuth: []
tags:
  - name: Users
    description: Operations related to customers
  - name: Cars
    description: Operations related to cars
  - name: admin
    description: Operations related to admin account
servers:
  - url: http://localhost:3001
    description: Local server
  - url: https://api.usedcars.com
    description: Production server
components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: Authentication cookie containing the JWT token
    ApiKeyAuth:
      type: apiKey
      in: header
      name: authorization
      description: API key for accessing protected endpoints
info:
  title: Used Cars API
  description: API for usedCars Website
  contact:
    name: Support Team
    url: https://www.usedcars.com/support
    email: ajaymaroju@techpixe.com
  termsOfService: https://www.usedcars.com/terms
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/auth/register:
    post:
      summary: User Registration
      description: Registers a new user and sends a confirmation email.
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  description: Full name of the user
                  example: Maroju Ajay
                email:
                  type: string
                  description: Email address of the user
                  example: marojuajay111@gmail.com
                password:
                  type: string
                  description: Password for the account
                  example: Ajay@110125
                phone:
                  type: string
                  description: Phone number of the user
                  example: 90000000
                address:
                  type: string
                  description: Address of the user
                  example: 123 Main St, Anytown, USA
                account_type:
                  type: string
                  description: Type of account (e.g., user, admin)
                  example: personal
                image:
                  type: string
                  format: binary
                  description: Profile image file
      responses:
        '200':
          description: User registration confirmation email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registration confirmation has been sent to the email! Please Verify
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: All fields are required for the registration
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserExist:
                    type: string
                    example: User already exists, please login
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  RegistrationError:
                    type: string
                    example: Error message details

  /api/auth/conform:
    post:
      summary: User Verification
      description: Verifies a user's registration using email and token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of the user
                  example: marojuajay111@gmail.com
                Registertoken:
                  type: string
                  description: Registration token sent to the user's email
                  example: abc123xyz456
      responses:
        '200':
          description: User verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User verified successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: All fields are required please enter
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server error

  /api/auth/login:
    post:
      summary: User Login
      description: Authenticates a user and generates a session token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of the user
                  example: marojuajay111@gmail.com
                password:
                  type: string
                  description: Password for the account
                  example: Ajay@110125
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
                    example: User Logged in Successfully !!
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: johndoe@example.com
                      status:
                        type: string
                        example: active
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserNotExist:
                    type: string
                    example: user does not exist!!.. please register
                  IncorrectPassword:
                    type: string
                    example: incorrect password
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  AllFieldsRequired:
                    type: string
                    example: All fields are required for the login
                  message:
                    type: string
                    example: user is not active please verify the email
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  LoginError:
                    type: string
                    example: Error message details
  
  /api/auth/forget-password:
    post:
      summary: Request a password reset link
      description: Sends an email to the user with a password reset link.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: marojuajay111@gmail.com
              required:
                - email
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              example:
                message: "Password link sent to the mail"
        '401':
          description: Email is required
          content:
            application/json:
              example:
                error: "Email is required"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred during password reset"

  /api/auth/reset-password:
    post:
      summary: Change user password
      description: Allows authenticated users to change their password using their old password and a new one.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: 123456
                newPassword:
                  type: string
                  format: password
                  example: 123
              required:
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              example:
                message: "Password updated Successfully"
        '400':
          description: Token not found or password mismatch
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    error: "Token did not found in cookie"
                PasswordDoesnotMatch:
                  value:
                    error: "Old password does not match"
        '401':
          description: Missing password fields or invalid token
          content:
            application/json:
              examples:
                Required:
                  value:
                    error: "Old password and new password are required"
                NotValid:
                  value:
                    error: "Token is not valid"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User did not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred during password change"

  /api/auth/me:
    get:
      summary: Retrieve User Data
      description: Fetches user data using a valid token from cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              example:
                _id: "60d0fe4f5311236168a109ca"
                firstname: "John"
                lastname: "Doe"
                email: "johndoe@example.com"
        '401':
          description: Unauthorized or token-related issues
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    error: "Token not found in the cookie"
                NotValid:
                  value:
                    error: "Token is not valid"
                IdNotFound:
                  value:
                    error: "ID not found in the token"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while fetching user data"

  /api/auth/:id:
    put:
      summary: Update User Details
      description: Updates the user's email or password using the token from cookies.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: marojuajay222@gmail.com
                password:
                  type: string
                  format: password
                  example: 123
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              example:
                _id: "60d0fe4f5311236168a109ca"
                email: "johndoe@example.com"
                message: "User updated Successfully"
        '401':
          description: Unauthorized or token-related issues
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    error: "Cannot get a token from a cookie"
                NotValid:
                  value:
                    error: "Token is not valid"
                IdNotFound:
                  value:
                    error: "User ID could not be extracted from the token"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while updating user details"
    

    delete:
      summary: Delete User
      description: Deletes a user based on the token found in cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              example:
                success: "User deleted Successfully"
        '400':
          description: Token or user ID related error
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    message: "No token found from the cookie"
                IdNotFound:
                  value:
                    message: "User ID not found in token"
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              example:
                message: "Invalid token"
        '404':
          description: User not found
          content:
            application/json:
              examples:
                UserMetaNotFound:
                  value:
                    message: "User metadata not found"
                UserNotFound:
                  value:
                    message: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while deleting the user"

    get:
      summary: Retrieve User Information
      description: Retrieves user information using a token stored in cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              example:
                id: "1234567890"
                email: "user@example.com"
                firstname: "John"
                lastname: "Doe"
        '401':
          description: Unauthorized - Token missing, invalid, or no user ID found
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    TokenNotFound: "Token not found in the cookie"
                NotValid:
                  value:
                    NotValid: "Token is not valid"
                IdNotFound:
                  value:
                    IdNotFound: "ID not found in the token"
        '404':
          description: User not found
          content:
            application/json:
              example:
                invalid: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while retrieving the user"

  /api/auth/logout:
    post:
      summary: User logout endpoint
      description: Logs out a user by clearing the authentication token cookie and deleting the user session.
      tags:
        - Users
      security:
        - CookieAuth: []
      responses:
        '200':
          description: User logged out successfully
          headers:
            Set-Cookie:
              description: Clears the authentication token cookie
              schema:
                type: string
                example: "token=; HttpOnly; Secure; SameSite=Strict; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
          content:
            application/json:
              example:
                message: "User logged out successfully"
        '401':
          description: Invalid or missing authentication token
          content:
            application/json:
              examples:
                InvalidToken:
                  value:
                    error: "invalid Token"
                NotValid:
                  value:
                    error: "token is not Correct"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred during logout"

  /api/cars:
    post:
      summary: Upload a new car
      operationId: uploadNewCar
      tags:
        - Cars
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                brand:
                  type: string
                  example: TATA
                model:
                  type: string
                  example: SUV100
                year:
                  type: integer
                  format: int32
                  example: 2012
                price:
                  type: number
                  format: float
                  example: 5000000
                mileage:
                  type: number
                  format: float
                  example: 35
                fuelType:
                  type: string
                  example: Petrol
                transmission:
                  type: string
                  example: Manual
                condition:
                  type: string
                  example: New
                location:
                  type: string
                  example: Hyderabad
                description:
                  type: string
                  example: "this is latest version"
                images:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
                - brand
                - model
                - year
                - price
                - mileage
                - fuelType
                - transmission
                - condition
                - location
                - description
      responses:
        '201':
          description: Car post added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
        '400':
          description: Bad Request (missing fields or no file uploaded)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '402':
          description: Payment Required (upload limit exceeded)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found (user not found)
          content:
            application/json:
              schema:
                type: object
                properties:
                  NoUserExist:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  CarCreationTimeError:
                    type: string

  /api/cars/:
    get:
      summary: Display all cars
      description: Retrieve a list of all cars from the database.
      tags:
        - Cars
      responses:
        200:
          description: Cars fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      type: object
                      properties:
                        brand:
                          type: string
                          example: Toyota
                        model:
                          type: string
                          example: Corolla
                        year:
                          type: integer
                          example: 2020
                        price:
                          type: number
                          example: 15000
                        mileage:
                          type: number
                          example: 30000
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  DisplayCarsError:
                    type: string
                    example: Error message detailing the issue

  /api/cars/filter:
    get:
      summary: Search for cars
      description: Retrieve a list of cars based on search filters such as brand, model, location, and price provided in headers.
      tags:
        - Cars
      security:
        - CookieAuth: []
      parameters:
        - name: brand
          in: header
          required: false
          description: The brand of the car to search for.
          schema:
            type: string
        - name: model
          in: header
          required: false
          description: The model of the car to search for.
          schema:
            type: string
        - name: location
          in: header
          required: false
          description: The location where the car is available.
          schema:
            type: string
        - name: price
          in: header
          required: false
          description: The price of the car to search for (numeric).
          schema:
            type: number
            format: float
      responses:
        '200':
          description: A list of cars matching the search criteria.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: The unique identifier for the car.
                        brand:
                          type: string
                          description: The brand of the car.
                        model:
                          type: string
                          description: The model of the car.
                        location:
                          type: string
                          description: The location of the car.
                        price:
                          type: number
                          format: float
                          description: The price of the car.
        '400':
          description: No data exists in the database for the given filters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No Data Exist on the Database
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  filterError:
                    type: string
                    example: Internal Server Error

  /api/cars/:id:
    get:
      summary: Get Car Details
      description: Fetch car details using the car ID provided in the headers.
      operationId: getCarDetails
      tags:
        - Cars
      security:
        - CookieAuth: []
      parameters:
        - in: header
          name: authentication
          required: true
          schema:
            type: string
          description: Car ID used for fetching the car details.
          example: "65f9b0e4e7d1c3a4d8f0d23b"
      responses:
        200:
          description: Car details fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  car:
                    type: object
                    description: Car details object
                    example:
                      _id: "65f9b0e4e7d1c3a4d8f0d23b"
                      brand: "Toyota"
                      model: "Camry"
                      year: 2022
                      price: 25000
        401:
          description: Car ID not found in headers
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "car id not Found"
        404:
          description: No car found with the provided ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No car found with the requested ID"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    put:
      summary: Update Car Price
      description: Update the price of a car using carId and newprice from headers
      tags:
        - Cars
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                carId:
                  type: string
                  description: The ID of the car to update
                newprice:
                  type: number
                  description: The new price for the car
              required:
                - carId
                - newprice
      responses:
        '200':
          description: Car price updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  YourCar:
                    type: string
                    description: Brand of the updated car
                  newprice:
                    type: number
                    description: Updated price of the car
        '400':
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Unauthorized, invalid or missing authorization
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Car or User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      summary: Delete a Car
      description: Allows authenticated users to delete their car using the car ID from the authentication header. Only the owner can delete the car.
      operationId: deleteCarByHeader
      tags:
        - Cars
      security:
        - CookieAuth: []
      parameters:
        - in: header
          name: authentication
          required: true
          description: Car ID to identify which car to delete
          schema:
            type: string
            example: "65f9b0e4e7d1c3a4d8f0d23b"
      responses:
        200:
          description: Car deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
                    example: "Car data deleted successfully"
        400:
          description: Missing car ID in the header
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ID not found in the params"
        401:
          description: Unauthorized - User is not the owner of the car or unauthorized car deletion attempt
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized"
        404:
          description: Car not found or User not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Car not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /api/admin/deactivate:
    put:
      summary: Set user account status to inactive
      description: Admin can deactivate a user's account using their ID.
      tags:
        - admin
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  description: The ID of the user to be deactivated.
      responses:
        200:
          description: Account status successfully set to inactive.
          content:
            application/json:
              example:
                message: "Account status set to INACTIVE successfully."
        400:
          description: Bad request (e.g., missing targetId).
          content:
            application/json:
              example:
                message: "Target ID is not received."
        401:
          description: Unauthorized (e.g., invalid or missing token).
          content:
            application/json:
              examples:
                NoToken:
                  value:
                    error: "Token not found or expired, please login."
                AuthFailed:
                  value:
                    error: "User authentication failed."
        403:
          description: Forbidden (e.g., non-admin or inactive user).
          content:
            application/json:
              examples:
                NotAdmin:
                  value:
                    message: "You are not authorized for this operation."
                UserInactive:
                  value:
                    error: "User is inactive."
        404:
          description: User not found.
          content:
            application/json:
              example:
                message: "No target user found with the given ID."
        500:
          description: Internal server error.
          content:
            application/json:
              example:
                error: "Internal server error."

  /api/admin/postlimit:
    put:
      summary: Set Post Limit
      description: Allows an admin to set a post limit for a specific user.
      tags:
        - admin
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  example: "603d2149e3e4c9473cd12eb5"
                postLimit:
                  type: integer
                  example: 10
      responses:
        200:
          description: Post limit set successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "post limit Set Successfully"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Target Id is not received"
        401:
          description: Unauthorized or invalid user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "you are not authorized for this operation"
        404:
          description: Target user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "no target user found on the ID"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

  /api/admin/overview:
    get:
      summary: Get active and inactive user counts
      description: This endpoint fetches the count of active and inactive users. Only accessible by admins.
      tags:
        - admin
      security:
        - CookieAuth: []
      responses:
        '200':
          description: Successfully retrieved user counts
          content:
            application/json:
              schema:
                type: object
                properties:
                  Active_Users:
                    type: integer
                    example: 150
                  InActive_Users:
                    type: integer
                    example: 50
                  Total_Users:
                    type: integer
                    example: 200
        '401':
          description: Unauthorized - User is not an admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized for this operation
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  NoUserExist:
                    type: string
                    example: User not received
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/admin/createuser:
    post:
      summary: Register a new user by admin
      description: Admin can register a new user with necessary details and a profile image.
      tags:
        - admin
      security:
        - CookieAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - fullname
                - email
                - password
                - phone
                - address
                - account_type
                - profileImage
              properties:
                fullname:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: Password123!
                phone:
                  type: string
                  example: "+1234567890"
                address:
                  type: string
                  example: "123 Main Street, City, Country"
                account_type:
                  type: string
                  enum: [admin, user]
                  example: user
                profileImage:
                  type: string
                  format: binary
      responses:
        200:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user registration completed Successfully from the admin
        400:
          description: Bad Request - No file uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded
        401:
          description: Unauthorized - Not an admin or missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized for this operation
        404:
          description: User already exists or User not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserExist:
                    type: string
                    example: User already exists, please login
                  NoUserExist:
                    type: string
                    example: User not received
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/admin/changeplan:
    put:
      summary: Update user subscription by admin
      description: Admin can update the subscription type of an active user.
      tags:
        - admin
      security:
        - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - subscription
              properties:
                userId:
                  type: string
                  example: "60a79c8b3f8e2c1d4c8b4567"
                subscription:
                  type: string
                  example: "premium"
      responses:
        200:
          description: User subscription updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user subscription type changed Successfully to premium
        400:
          description: Bad Request - Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid input data
        401:
          description: Unauthorized - Not an admin or user inactive or same subscription type
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized for this operation
        404:
          description: User not found or user not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/admin/totalposts:
   get:
      summary: Get user details and posts by admin
      description: Admin can retrieve user details and their posts using the userId from the authorization header.
      tags:
        - admin
      security:
        - CookieAuth: []
      parameters:
        - in: header
          name: Authorization
          required: true
          description: UserId of the target user.
          schema:
            type: string
            example: "60a79c8b3f8e2c1d4c8b4567"
      responses:
        200:
          description: User details and posts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userDetailsd:
                    type: object
                    properties:
                      user:
                        type: string
                        example: John Doe
                      number_of_posts:
                        type: integer
                        example: 5
                      all_posts:
                        type: array
                        items:
                          type: object
                          properties:
                            carName:
                              type: string
                              example: Toyota Corolla
                            modelYear:
                              type: integer
                              example: 2020
        401:
          description: Unauthorized - Not an admin or user id not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized for this operation
        404:
          description: User not found or user not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not Found
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/admin/createcar:
   post:
      summary: Create a new car by admin
      description: Admin can create a new car listing with images.
      tags:
        - admin
      security:
        - CookieAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - brand
                - model
                - year
                - price
                - mileage
                - fuelType
                - transmission
                - condition
                - location
                - description
                - images
              properties:
                brand:
                  type: string
                  example: Toyota
                model:
                  type: string
                  example: Corolla
                year:
                  type: integer
                  example: 2020
                price:
                  type: number
                  example: 15000
                mileage:
                  type: integer
                  example: 30000
                fuelType:
                  type: string
                  example: Petrol
                transmission:
                  type: string
                  example: Automatic
                condition:
                  type: string
                  example: Used
                location:
                  type: string
                  example: New York, NY
                description:
                  type: string
                  example: Well maintained, single owner, no accidents.
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: Car created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Car created Successfully
        400:
          description: Bad Request - Missing fields or no images uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: All fields are required!
        401:
          description: Unauthorized - Not an admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized for this operation
        404:
          description: User not found or not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not received
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/admin/viewcar:
    get:
      summary: Get car details by admin
      description: Admin can retrieve car details using the carId from the authentication header.
      tags:
        - admin
      security:
        - CookieAuth: []
      parameters:
        - in: header
          name: Authentication
          required: true
          description: CarId of the target car.
          schema:
            type: string
            example: "60a79c8b3f8e2c1d4c8b4567"
      responses:
        200:
          description: Car details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  carDetails:
                    type: object
                    properties:
                      brand:
                        type: string
                        example: Toyota
                      model:
                        type: string
                        example: Corolla
                      year:
                        type: integer
                        example: 2020
                      price:
                        type: number
                        example: 15000
        401:
          description: Unauthorized - Not an admin or carId not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You are not authorized for this operation
        404:
          description: Car not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No Posts are found on this ID
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server Error

  /api/admin/updatecarprice:
    put:
      summary: Update car price by admin
      description: Admin can update the price of a specific car listing using carId.
      tags:
        - admin
      security:
        - CookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - carId
                - newprice
              properties:
                carId:
                  type: string
                  example: "60a79c8b3f8e2c1d4c8b4567"
                newprice:
                  type: number
                  example: 18000
      responses:
        200:
          description: Car price updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Car price updated successfully to: 18000"
        401:
          description: Unauthorized - Not an admin or carId not received
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized for this operation"
        404:
          description: Car not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No Posts are found on this ID"
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal Server Error"

