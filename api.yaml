openapi: "3.1.0"
security:
  - CookieAuth: []
tags:
  - name: Users
    description: Operations related to customers
  - name: Cars
    description: Operations related to cars
  - name: admin
    description: Operations related to car admin
servers:
  - url: http://localhost:3001
    description: Local server
  - url: https://api.usedcars.com
    description: Production server
components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: Authentication cookie containing the JWT token
info:
  title: Used Cars API
  description: API for usedCars Website
  contact:
    name: Support Team
    url: https://www.usedcars.com/support
    email: ajaymaroju@techpixe.com
  termsOfService: https://www.usedcars.com/terms
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /api/auth/register:
    post:
      summary: User Registration
      description: Registers a new user and sends a confirmation email.
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  description: Full name of the user
                  example: Maroju Ajay
                email:
                  type: string
                  description: Email address of the user
                  example: marojuajay111@gmail.com
                password:
                  type: string
                  description: Password for the account
                  example: Ajay@110125
                phone:
                  type: string
                  description: Phone number of the user
                  example: 90000000
                address:
                  type: string
                  description: Address of the user
                  example: 123 Main St, Anytown, USA
                account_type:
                  type: string
                  description: Type of account (e.g., user, admin)
                  example: personal
                image:
                  type: string
                  format: binary
                  description: Profile image file
      responses:
        '200':
          description: User registration confirmation email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registration confirmation has been sent to the email! Please Verify
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No file uploaded
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: All fields are required for the registration
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserExist:
                    type: string
                    example: User already exists, please login
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  RegistrationError:
                    type: string
                    example: Error message details

  /api/auth/conform:
    post:
      summary: User Verification
      description: Verifies a user's registration using email and token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of the user
                  example: marojuajay111@gmail.com
                Registertoken:
                  type: string
                  description: Registration token sent to the user's email
                  example: abc123xyz456
      responses:
        '200':
          description: User verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User verified successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: All fields are required please enter
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal Server error

  /api/auth/login:
    post:
      summary: User Login
      description: Authenticates a user and generates a session token.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email address of the user
                  example: marojuajay111@gmail.com
                password:
                  type: string
                  description: Password for the account
                  example: Ajay@110125
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
                    example: User Logged in Successfully !!
                  user:
                    type: object
                    properties:
                      email:
                        type: string
                        example: johndoe@example.com
                      status:
                        type: string
                        example: active
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserNotExist:
                    type: string
                    example: user does not exist!!.. please register
                  IncorrectPassword:
                    type: string
                    example: incorrect password
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  AllFieldsRequired:
                    type: string
                    example: All fields are required for the login
                  message:
                    type: string
                    example: user is not active please verify the email
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  LoginError:
                    type: string
                    example: Error message details
  
  /api/auth/forget-password:
    post:
      summary: Request a password reset link
      description: Sends an email to the user with a password reset link.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: marojuajay111@gmail.com
              required:
                - email
      responses:
        '200':
          description: Password reset link sent successfully
          content:
            application/json:
              example:
                message: "Password link sent to the mail"
        '401':
          description: Email is required
          content:
            application/json:
              example:
                error: "Email is required"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred during password reset"

  /api/auth/reset-password:
    post:
      summary: Change user password
      description: Allows authenticated users to change their password using their old password and a new one.
      tags:
        - Users
      security:
        - CookieAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: 123456
                newPassword:
                  type: string
                  format: password
                  example: 123
              required:
                - oldPassword
                - newPassword
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              example:
                message: "Password updated Successfully"
        '400':
          description: Token not found or password mismatch
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    error: "Token did not found in cookie"
                PasswordDoesnotMatch:
                  value:
                    error: "Old password does not match"
        '401':
          description: Missing password fields or invalid token
          content:
            application/json:
              examples:
                Required:
                  value:
                    error: "Old password and new password are required"
                NotValid:
                  value:
                    error: "Token is not valid"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User did not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred during password change"

  /api/auth/me:
    get:
      summary: Retrieve User Data
      description: Fetches user data using a valid token from cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User data retrieved successfully
          content:
            application/json:
              example:
                _id: "60d0fe4f5311236168a109ca"
                firstname: "John"
                lastname: "Doe"
                email: "johndoe@example.com"
        '401':
          description: Unauthorized or token-related issues
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    error: "Token not found in the cookie"
                NotValid:
                  value:
                    error: "Token is not valid"
                IdNotFound:
                  value:
                    error: "ID not found in the token"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while fetching user data"

  /api/auth/:id:
    put:
      summary: Update User Details
      description: Updates the user's email or password using the token from cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: marojuajay222@gmail.com
                password:
                  type: string
                  format: password
                  example: 123
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              example:
                _id: "60d0fe4f5311236168a109ca"
                email: "johndoe@example.com"
                message: "User updated Successfully"
        '401':
          description: Unauthorized or token-related issues
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    error: "Cannot get a token from a cookie"
                NotValid:
                  value:
                    error: "Token is not valid"
                IdNotFound:
                  value:
                    error: "User ID could not be extracted from the token"
        '404':
          description: User not found
          content:
            application/json:
              example:
                error: "User does not exist"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while updating user details"
    

    delete:
      summary: Delete User
      description: Deletes a user based on the token found in cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              example:
                success: "User deleted Successfully"
        '400':
          description: Token or user ID related error
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    message: "No token found from the cookie"
                IdNotFound:
                  value:
                    message: "User ID not found in token"
        '401':
          description: Unauthorized - Invalid token
          content:
            application/json:
              example:
                message: "Invalid token"
        '404':
          description: User not found
          content:
            application/json:
              examples:
                UserMetaNotFound:
                  value:
                    message: "User metadata not found"
                UserNotFound:
                  value:
                    message: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while deleting the user"

    get:
      summary: Retrieve User Information
      description: Retrieves user information using a token stored in cookies.
      tags:
        - Users
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              example:
                id: "1234567890"
                email: "user@example.com"
                firstname: "John"
                lastname: "Doe"
        '401':
          description: Unauthorized - Token missing, invalid, or no user ID found
          content:
            application/json:
              examples:
                TokenNotFound:
                  value:
                    TokenNotFound: "Token not found in the cookie"
                NotValid:
                  value:
                    NotValid: "Token is not valid"
                IdNotFound:
                  value:
                    IdNotFound: "ID not found in the token"
        '404':
          description: User not found
          content:
            application/json:
              example:
                invalid: "User not found"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred while retrieving the user"

  /api/auth/logout:
    post:
      summary: User logout endpoint
      description: Logs out a user by clearing the authentication token cookie and deleting the user session.
      tags:
        - Users
      security:
        - CookieAuth: []
      responses:
        '200':
          description: User logged out successfully
          headers:
            Set-Cookie:
              description: Clears the authentication token cookie
              schema:
                type: string
                example: "token=; HttpOnly; Secure; SameSite=Strict; Expires=Thu, 01 Jan 1970 00:00:00 GMT"
          content:
            application/json:
              example:
                message: "User logged out successfully"
        '401':
          description: Invalid or missing authentication token
          content:
            application/json:
              examples:
                InvalidToken:
                  value:
                    error: "invalid Token"
                NotValid:
                  value:
                    error: "token is not Correct"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An unexpected error occurred during logout"

  /api/cars:
    post:
      summary: Add a new car post
      description: Allows authenticated users to add a new car post. Requires a valid JWT token for authentication and file upload.
      tags:
        - Cars
      security:
        - CookieAuth: []
      operationId: addCarPost
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                brand:
                  type: string
                  example: "Toyota"
                model:
                  type: string
                  example: "Corolla"
                year:
                  type: integer
                  example: 2020
                price:
                  type: number
                  format: float
                  example: 20000.00
                mileage:
                  type: number
                  example: 15000
                fuelType:
                  type: string
                  example: "Petrol"
                transmission:
                  type: string
                  example: "Automatic"
                condition:
                  type: string
                  example: "Used"
                location:
                  type: string
                  example: "New York"
                sellerContact:
                  type: string
                  example: "+123456789"
                description:
                  type: string
                  example: "Well-maintained car with low mileage."
                images:
                  type: string
                  format: binary
                  description: The image file of the car.
      responses:
        '201':
          description: Car post added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
                    example: "Car post added successfully"
        '400':
          description: Bad Request - Missing required fields or no file uploaded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "All fields are required!"
                  message:
                    type: string
                    example: "No file uploaded"
        '401':
          description: Unauthorized - Token issues or user is inactive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token not found or expired, please login"
                  message:
                    type: string
                    example: "User is inactive"
        '402':
          description: Payment Required - User has exceeded upload limit.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "upload limit exceeded, purchase any plan for further uploads"
        '404':
          description: Not Found - User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  CarCreationTimeError:
                    type: string
                    example: "Internal server error"
    get:
      summary: Get all car details
      description: Retrieve details of all cars from the database.
      tags:
        - Cars
      responses:
        '200':
          description: Cars retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  DisplayCarsError:
                    type: string
                    example: An error occurred while processing your request

  /api/cars:id:
    get:
      summary: Retrieve car details by ID
      description: Fetches the details of a car using its ID. Requires a valid JWT token for authentication.
      tags:
        - Cars
      security:
        - CookieAuth: []
      operationId: getCarById
      parameters:
        - name: carid
          in: path
          required: true
          description: The ID of the car to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Car details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  car:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "car123"
                      owner_id:
                        type: string
                        example: "user456"
                      model:
                        type: string
                        example: "Tesla Model S"
                      year:
                        type: integer
                        example: 2021
                      status:
                        type: string
                        example: "available"
        '400':
          description: Bad Request - Car ID not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ID not found"
        '401':
          description: Unauthorized - Token issues or user is inactive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  TokenNotFound:
                    type: string
                    example: "token not found"
                  NotValid:
                    type: string
                    example: "token is not valid"
                  IdNotFound:
                    type: string
                    example: "id not found in the token"
                  message:
                    type: string
                    example: "user is not active please verify the email"
        '404':
          description: Not Found - User or car not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  UserNotFound:
                    type: string
                    example: "User not found please register"
                  error:
                    type: string
                    example: "No car found with the requested ID"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    put:
      summary: Retrieve car details by ID
      description: Fetches the details of a car using its ID. Requires a valid JWT token for authentication.
      tags:
        - Cars
      security:
        - CookieAuth: []
      operationId: getCarById
      parameters:
        - name: carid
          in: path
          required: true
          description: The ID of the car to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Car details retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  YourCar:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "car123"
                      owner_id:
                        type: string
                        example: "user456"
                      model:
                        type: string
                        example: "Tesla Model S"
                      year:
                        type: integer
                        example: 2021
                      status:
                        type: string
                        example: "available"
        '400':
          description: Bad Request - Car ID not found or user not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "ID not found"
                  message:
                    type: string
                    example: "No user Exist on this ID"
        '401':
          description: Unauthorized - Token issues or user is inactive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token not found or expired, please login"
                  message:
                    type: string
                    example: "User is inactive please confirm your account"
        '404':
          description: Not Found - No car found with the requested ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No car found with this ID"
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"
    delete:
      summary: Delete a car
      description: Deletes a car from the database by its ID.
      tags:
        - Cars
      security:
        - CookieAuth: []
      operationId: deleteCar
      parameters:
        - name: carid
          in: path
          required: true
          description: The ID of the car to delete.
          schema:
            type: string
      responses:
        '200':
          description: Car deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  Success:
                    type: string
                    example: Car data deleted successfully.
        '400':
          description: Bad Request - Car ID not found or user not authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ID not found in the params or authentication failed please login again.
        '401':
          description: Unauthorized - User is inactive or not authorized to delete this car.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User is inactive or you are not authorized.
        '404':
          description: Not Found - Car not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Car not found.
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.

  /api/cars/search:
    get:
      summary: Get filtered car details
      description: Retrieve car details using optional filters like brand, model, price, and location.
      tags:
        - Cars
      parameters:
        - in: query
          name: brand
          required: false
          schema:
            type: string
          description: Filter cars by brand (case-insensitive).
        - in: query
          name: model
          required: false
          schema:
            type: string
          description: Filter cars by model (case-insensitive).
        - in: query
          name: location
          required: false
          schema:
            type: string
          description: Filter cars by location (case-insensitive).
        - in: query
          name: price
          required: false
          schema:
            type: number
          description: Filter cars by exact price.
      responses:
        '200':
          description: Cars retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  cars:
                    type: array
                    items:
                      type: object
                      additionalProperties: true
        '404':
          description: No cars found based on the filters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cars cannot be retrieved from the database
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  filterError:
                    type: string
                    example: An error occurred while processing your request

  /api/auth/deactivate:
    post:
      summary: Deactivate a user account
      description: Deactivates a user account by setting its status to inactive.
      tags:
        - admin
      operationId: deactivateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                targetId:
                  type: string
                  description: The ID of the user to deactivate.
      responses:
        '200':
          description: User account deactivated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Account status set to be INACTIVE successfully.
        '400':
          description: Bad Request - ID not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: ID not found.
        '401':
          description: Unauthorized - Token not found or user is not authorized.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token not found or expired, please login.
        '404':
          description: Not Found - User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found.
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error.




